import { errors } from '../error/allErrors'
import { statusToCodeMap } from '../error/statusCodeMap'

export statusToErrorMap = {
  "UNKNOWN": errors.UnknownError
  "UNAUTHENTICATED": errors.UnauthenticatedError
  "PERMISSION_DENIED": errors.PermissionDeniedError
  "INVALID_ARGUMENT": errors.InvalidArgumentError
  "FAILED_PRECONDITION": errors.FailedPreconditionError
  "OUT_OF_RANGE": errors.OutOfRangeError
  "ALREADY_EXISTS": errors.AlreadyExistsError
  "NOT_FOUND": errors.NotFoundError
  "ABORTED": errors.AbortedError
  "CANCELLED": errors.CancelledError
  "RESOURCE_EXHAUSTED": errors.ResourceExhaustedError
  "DEADLINE_EXCEEDED": errors.TimeoutError
  "UNAVAILABLE": errors.UnavailableError
  "UNIMPLEMENTED": errors.UnimplementedError
  "INTERNAL": errors.InternalError
  "DATA_LOSS": errors.DataLossError
}

export codeToErrorMap = {...for key k, val v in statusToErrorMap:
  {[statusToCodeMap[k]]: v}
}

export errorClassForCode(code) ->
  if code~looseEq(null):
    errors.UnmarshalledError
  else:
    codeToErrorMap[code] or errors.UnmarshalledError

export errorClassForStatus(status) ->
  code = status?.code
  ty = typeof(code)
  if ty != 'string' and ty != 'number': return errors.UnmarshalledError
  codeToErrorMap[code] or errors.UnmarshalledError
