import * as ErrorDetails from './ErrorDetail'
import * as GoogleErrorDetails from './GoogleErrorDetails'

// Reconstruct from quoted class names to avoid being defeated by
// name-mangling minifiers.
bulk = Object.assign({}, ErrorDetails, GoogleErrorDetails)
details = {...for val v in bulk: {[v.className]: v}}

// Create gRPC class map
gRPCClassMap = {...for val v in bulk:
  if v.gRPCMessage:
    {[v.gRPCMessage]: v}
}

// Register a new type of error.
export registerErrorDetailClass(clazz): void ->
  if not (clazz?.prototype instanceof ErrorDetails.ErrorDetail):
    throw new Error(`registerErrorDetailClass: class must extend ErrorDetail.`)

  name = clazz.className
  if typeof(name) != 'string' or name == '':
    throw new Error("registerErrorDetailClass: Could not determine class name")

  if details[name]:
    throw new Error(
      `registerErrorDetailClass: An error detail named '${name}' already exists`
    )

  details[name] = clazz
  if clazz.gRPCMessage:
    gRPCClassMap[clazz.gRPCMessage] = clazz

export getDetailForMessageType(ty) ->
  gRPCClassMap[ty or '']

export { details }
