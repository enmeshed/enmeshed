export statusToCodeMap = {
  OK: 0
  CANCELLED: 1
  UNKNOWN: 2
  INVALID_ARGUMENT: 3
  DEADLINE_EXCEEDED: 4
  NOT_FOUND: 5
  ALREADY_EXISTS: 6
  PERMISSION_DENIED: 7
  UNAUTHENTICATED: 16
  RESOURCE_EXHAUSTED: 8
  FAILED_PRECONDITION: 9
  ABORTED: 10
  OUT_OF_RANGE: 11
  UNIMPLEMENTED: 12
  INTERNAL: 13
  UNAVAILABLE: 14
  DATA_LOSS: 15
}

export codeToStatusMap = {...for key k, val v in statusToCodeMap:
  {[v]: k}
}

// Determine the error code associated with the status name, or 2 = UNKNOWN error
// if not found.
export codeForStatusName(name) ->
  rst = statusToCodeMap[name or '']
  // Return UNKNOWN if not found.
  if rst~looseEq(null): 2 else: rst

// Determine the error status associated with the code, or UNKNOWN.
export statusNameForCode(code) ->
  if code~looseEq(null):
    "UNKNOWN"
  else:
    codeToStatusMap[code] or "UNKNOWN"
