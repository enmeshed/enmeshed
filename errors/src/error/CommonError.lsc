import { ErrorDetail } from '../detail/ErrorDetail'
import { RetryInfo } from '../detail/GoogleErrorDetails'
import { detailsToJSON, decodeDetailsFromJSON } from '../detail/marshalDetails'
import { codeForStatusName, classNameForStatusCode } from './statusCodeMap'

dumpError(err): string ->
  if typeof(err?.dump) == 'function':
    err.dump()
  else:
    err?.stack or ''

// Base class for all common errors.
export class CommonError extends Error:
  // Quoted class name of this error. Prevents name mangling minifiers from
  // defeating the error library.
  static className = "CommonError"
  // List of ErrorDetail objects specifying details of this error
  details = undefined
  // Another error object which caused this error.
  cause = undefined
  // HTTP protocol status associated with this error
  httpStatus = 500
  // gRPC status code enum (google.rpc.Code) associated with this error
  gRPCStatus = "UNKNOWN"

  // Global mapping from class names to errors
  static classNameMap = {}

  constructor(message, cause) ->
    super(message)
    this.name = this.constructor.className
    this.setCause(cause)

  setCause(cause): CommonError ->
    if cause~looseNotEq(null):
      if not (cause instanceof Error):
        throw new Error(`CommonError.setCause(): expected an Error, got ${cause}`)
    this.cause = cause
    this

  // Full text dump of error info.
  dump(): string ->
    let result = this.stack

    if this.details:
      now result += `\n\nDetails\n--------\n`
      for elem detail in this.details:
        now result += `${detail.toString()}\n`

    if this.cause:
      now result += `\n\nCaused by:\n--------\n` + dumpError(this.cause)

    result

  addDetail(detail: ErrorDetail) ->
    if not (detail instanceof ErrorDetail):
      throw new Error(`CommonError.addDetail(): detail must be an ErrorDetail`)

    this.details = this.details or []
    this.details.push(detail)

  // Locate error details by class or class name
  getDetails(ty) ->
    if not this.details: return []

    matcher = if ty~looseEq(null):
      -> true
    elif typeof(ty) == "string":
      x -> x.name == ty
    else:
      now ty = ty.className
      x -> x.name == ty

    this.details.filter(matcher)

  // Locate a single error detail by class or class name
  getDetail(ty) ->
    res = this.getDetails(ty)
    if res.length: res[0] else: null

  // If the error can be retried, return information about the retry options.
  // NULL if error is not retriable.
  get retry() ->
    return this.getDetail(RetryInfo)

  // Set retry information for the error
  setRetryDelay(sec, ns): CommonError ->
    det = this.getDetail(RetryInfo)
    if det:
      // XXX: set delay.
      return this
    else:
      this.addDetail(new RetryInfo(sec, ns))
    this

  // Additional fields associated with the error. Must be null or a plain JS
  // object.
  toFields(productionCensorship) -> null

  // Hydrate this Error object with data returned from toFields.
  fromFields(fields): void -> return

  // Get the gRPC status string for this error
  getStatusName(): string ->
    this.gRPCStatus or "UNKNOWN"

  // Get the gRPC status code (integer) for this error
  getStatusCode(): number ->
    codeForStatusName(this.gRPCStatus)

  // Get the canonical CommonErrors class name for this error
  getClassName(): string ->
    this.name

  // Convert to a canonical JSON representation, equivalent to the
  // canonical JSON encoding of a google.protobuf.Status representing the error.
  toJSON(opts) -> {
    code: this.getStatusCode()
    message: this.message
    details: detailsToJSON(this, opts)
  }

  // Rehydrate from a canonical JSON representation
  static fromJSON(json, opts) -> {
    // Code 0 = no error, shouldn't get here.
    if json?.code == 0:
      return new UnmarshalledError(`Attempted to decode an error with a successful status code.`)

    // Decode error detail information
    let marshalDetail = null, otherDetails = []
    try:
      now [marshalDetail, otherDetails] = if opts?.decodeDetails:
        opts.decodeDetails(json, opts)
      else:
        decodeDetailsFromJSON(json)
    catch err:
      // XXX: Add error detail here specifying we couldn't decode details,
      // and why.
      null

    // Attempt to figure out the class of the error.
    let className = opts?.className
    if not className: now className = marshalDetail?.errorClass
    // Unspecified class name, do a best-match from status code
    if not className: now className = classNameForStatusCode(json?.code)
    clazz = if className: this.classNameMap[className]

    if not clazz:
      return new UnmarshalledError(`Could not decode error type from status representation.\nOriginal status code: ${json?.code}\nBest-guess error class: ${className}\nOriginal error message:\n-----\n${json?.message}`)

    // Formulate error object from known details
    err = new clazz()
    err.message = json?.message

    if marshalDetail:
      if marshalDetail.stack: err.stack = marshalDetail.stack
      if marshalDetail.cause:
        try:
          cause = if opts?.decodeCause:
            opts.decodeCause(marshalDetail.cause)
          else:
            this.fromJSON(marshalDetail.cause)
          err.setCause(cause)
        catch decodingError:
          err.setCause(new UnmarshalledError(`Error while decoding cause of error: ${decodingError}`))
          null
      if marshalDetail.fields:
        err.fromFields(marshalDetail.fields)

    for elem detail in (otherDetails or []):
      err.addDetail(detail)

    err
  } // fromJSON

  static registerErrorClass(clazz): void -> {
    if clazz != CommonError and (not (clazz?.prototype instanceof CommonError)):
      throw new Error(`registerErrorClass: class must extend CommonError.`)

    name = clazz.className
    if typeof(name) != 'string' or name == '':
      throw new Error("registerErrorClass: Could not determine class name")

    if this.classNameMap[name]:
      throw new Error(
        `registerErrorClass: An error named '${name}' already exists`
      )

    this.classNameMap[name] = clazz
  } // registerErrorClass

export class UnknownError extends CommonError:
  static className = "UnknownError"
  httpStatus = 500
  gRPCStatus = "UNKNOWN"

// If an error is transported over the wire but we are unable to deserialize
// it properly, this error will be thrown instead.
export class UnmarshalledError extends UnknownError:
  static className = "UnmarshalledError"
  httpStatus = 500
  gRPCStatus = "UNKNOWN"
