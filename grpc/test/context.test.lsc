{ Contexty } = require('contexty')
cuid = require('cuid')
{ Duplex } = require('stream')

let ctxContainer = new Contexty()

getContext() ->
  ctxContainer.context

pushContext(id) ->
  console.log("pushContext current context id", getContext()?.id)
  ctxContainer.create()
  getContext().id = id or cuid()
  console.log("pushContext new context id", getContext().id)

pushContext("GLOBAL")

dumpContext(extra) ->
  console.log("context is", getContext()?.id, ":", extra)

makeAStream() -/>
  pushContext("STREAM")
  let entriesRead = 0

  stream = new Duplex({
    objectMode: true
    read(size): void ->
      console.log("read", size)
      while (entriesRead < 10) and (this.push({n: entriesRead})):
        console.log("pushed", entriesRead)
        entriesRead++

      if(entriesRead >= 9):
        console.log("pushing eof")
        this.push(null)
    write(chunk, encoding, callback): void ->
      callback()
  })

  stream

it! 'should preserve context when iterating', -/>
  // dumpContext("start")
  // stream <- makeAStream()

  // for await x of stream:
  //   dumpContext(x)

  // stream.end()
  return
