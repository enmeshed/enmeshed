import { deferredStream } from '..'

it! 'deferredStream std', -/>
  { next, stream } = deferredStream()

  setTimeout(
    ->
      next(3)
      next(1)
      next(3)
      next(3)
      next(7, true)
    500
  )

  let vals = []
  for await val of stream:
    vals.push(val)
  console.log(vals)
  expect(vals).toEqual([3,1,3,3,7])

it! 'deferredStream error', -/>
  { next, error, stream } = deferredStream()

  setTimeout(
    ->
      next(3)
      next(1)
      next(3)
      error(new Error('failed'))
    500
  )

  let vals = []
  let err = null
  try:
    for await val of stream:
      vals.push(val)
  catch err1:
    now err = err1

  expect(err.message).toBe('failed')
  expect(vals).toEqual([3,1,3])
  console.error(err)
  console.log(vals)
