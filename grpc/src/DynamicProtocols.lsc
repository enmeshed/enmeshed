import { DynamicProtocols as BaseDynamicProtocols } from '@enmeshed/protobuf'
import { channelFactoryOverride } from './PathAwareChannel'
grpc = require('@grpc/grpc-js')

export class DynamicProtocols extends BaseDynamicProtocols:
  // Create a gRPC client for the given named service
  client(protoName, port, credentials, opts) -/>
    [ def ] <- this.findAll(protoName)
    if not def:
      throw new Error(`DynamicProtocols.client: no protocol ${protoName} could be loaded.`)
    if not def.client:
      def.client = grpc.makeGenericClientConstructor(def.methods, def.name, {})
    if typeof(port) != 'undefined':
      now opts = Object.assign({}, opts, {channelFactoryOverride})
      if not credentials: now credentials = grpc.credentials.createInsecure()
      new def.client(port, credentials, opts)
    else:
      def.client
