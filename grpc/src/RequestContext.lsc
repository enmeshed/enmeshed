import { Metadata, metadataFromObject } from './util'

export class RequestContext:
  // Request types
  static unary = 'unary'
  static requestStream = 'requestStream'
  static responseStream = 'responseStream'
  static bidirectionalStream = 'bidirectionalStream'

  // Request type for this request
  requestType = null

  // Method name for this request
  methodName = null

  // Fully qualified method name, including protobuf package and service name
  fqMethodName = null

  constructor(requestType, methodName, fqMethodName) ->
    this.requestType = requestType
    this.methodName = methodName
    this.fqMethodName = fqMethodName

handleMetadata(metadata) ->
  if not metadata:
    new Metadata()
  elif metadata instanceof Metadata:
    metadata.clone()
  elif typeof(metadata) == 'object':
    metadataFromObject(metadata)
  else:
    new Metadata()

export class ClientRequestContext extends RequestContext:
  constructor(client, requestType, methodName, metadata, request) ->
    super(requestType, methodName)
    this.client = client
    this.request = request
    this.metadata = handleMetadata(metadata)

export class ServerRequestContext extends RequestContext:
  constructor(server, requestType, methodName, fqMethodName) ->
    super(requestType, methodName, fqMethodName)
    this.server = server
