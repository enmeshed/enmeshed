import { classifyMethod } from '@enmeshed/protobuf'
import { handleStream } from './StreamHandler'
import { ServerRequestContext } from './RequestContext'

grpc = require('@grpc/grpc-js')

// XXX: implement and export this!
class UnaryResponse {}

// Dispatch node.js callback for a unary-style request
dispatchNodeCallback(requestContext, callback) ->
  if requestContext.error:
    callback(requestContext.error, null, requestContext.error.metadata)
  else:
    { result } = requestContext
    if typeof(result) != 'object':
      requestContext.error = new Error("invalid response from grpc method handler, expected an object")
      callback(requestContext.error)
    elif result instanceof UnaryResponse:
      callback(null, result.value, result.trailer, result.flags)
    else:
      callback(null, result)

wrapUnaryHandler(serverEnhancer, methodName, fqn, unaryHandler) ->
  grpcUnaryHandler(call, callback): void -/>
    requestContext = new ServerRequestContext(serverEnhancer, 'unary', methodName, fqn)
    requestContext.call = call
    requestContext.metadata = call.metadata

    try:
      serverEnhancer.requestWillBegin(requestContext)
      requestContext.result <- unaryHandler(call.request, call, requestContext)
    catch err:
      requestContext.error = serverEnhancer.marshalError(err)

    dispatchNodeCallback(requestContext, callback)
    serverEnhancer.requestDidEnd(requestContext)

wrapRequestStreamHandler(serverEnhancer, methodName, fqn, rsHandler) ->
  grpcRequestStreamHandler(stream, callback): void -/>
    requestContext = new ServerRequestContext(serverEnhancer, 'requestStream', methodName, fqn)
    requestContext.metadata = stream.metadata

    try:
      serverEnhancer.requestWillBegin(requestContext)
      requestContext.result <- rsHandler(stream, requestContext)
    catch err:
      requestContext.error = serverEnhancer.marshalError(err)

    dispatchNodeCallback(requestContext, callback)
    serverEnhancer.requestDidEnd(requestContext)

wrapResponseStreamGenerator(serverEnhancer, methodName, fqn, responseGenerator) ->
  grpcResponseStreamHandler(stream): void -/>
    requestContext = new ServerRequestContext(serverEnhancer, 'responseStream', methodName, fqn)
    requestContext.metadata = stream.metadata

    try:
      serverEnhancer.requestWillBegin(requestContext)
      asyncIterable = responseGenerator(stream.request, stream, requestContext)
      for await (packet of asyncIterable): stream.write(packet)
      stream.end()
    catch err:
      requestContext.error = serverEnhancer.marshalError(err)
      stream.emit('error', requestContext.error)

    serverEnhancer.requestDidEnd(requestContext)

// XXX: metadata api
export class ServerEnhancer:
  constructor(grpcServer) ->
    if not grpcServer:
      now grpcServer = new grpc.Server()
    this.grpcServer = grpcServer

  // Promisified bindAsync
  bind(port, credentials): Promise<bool> ->
    server = this.grpcServer

    // Default to insecure credentials.
    if not credentials:
      now credentials = grpc.ServerCredentials.createInsecure()

    new Promise! (resolve, reject) ->
      server.bindAsync(port, credentials, (err) ->
        if err:
          reject(err)
        else:
          resolve(true)
      )

  start() ->
    this.grpcServer.start()

  // Promisified tryShutdown
  shutdown(): Promise<bool> ->
    server = this.grpcServer
    new Promise! (resolve, reject) ->
      server.tryShutdown! (err) -> if err: reject(err) else: resolve(true)

  // Override in subclass to perform processing before a request is sent.
  // This method SHOULD NOT throw, as errors will be propagated into the gRPC
  // call context.
  requestWillBegin(requestContext: ServerRequestContext): void -> return

  // Override in subclass to perform processing after a request is complete.
  // This method SHOULD NOT throw, as errors will be propagated into the gRPC
  // call context.
  requestDidEnd(requestContext: ServerRequestContext): void -> return

  // Override in a subclass to control how JS errors are marshalled into
  // gRPC errors and returned to the client.
  marshalError(err) -> err

  _wrapBidiStream(handlerClass) ->
    marshalContext = this
    bidiStreamAsyncHandler(stream): void ->
      handler = new handlerClass(stream, marshalContext)
      handler.marshalError = (err) -> marshalContext.marshalError(err)
      handleStream(stream, handler)

  addService(serviceDef, bindings): void ->
    // Transform bindings
    nextBindings = {...for key name, val handler in bindings:
      // Get protobuf method definition
      methodDef = serviceDef[name]
      if not methodDef:
        throw new Error(`ServerEnhancer.addService: service has no method named ${name}`)

      fqn = `${methodDef.serviceName}/${name}`

      // Wrap async handlers
      {[name]: match classifyMethod(methodDef):
        | 'unary': wrapUnaryHandler(this, name, fqn, handler)
        | 'requestStream': wrapRequestStreamHandler(this, name, fqn, handler)
        | 'responseStream': wrapResponseStreamGenerator(this, name, fqn, handler)
        | 'bidirectionalStream': this._wrapBidiStream(handler)
        | else: throw new Error("invalid method definition " + name)
      }
    }
    this.grpcServer.addService(serviceDef, nextBindings)
