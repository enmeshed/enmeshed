import { classifyMethod } from '@enmeshed/protobuf'
import { handleStream, StreamHandler } from './StreamHandler'
import { ClientRequestContext } from './RequestContext'

deferred = require('p-defer')
debug = require('debug')('@enmeshed/grpc:client')

wrapUnaryMethod(clientEnhancer, methodName, method, context) ->
  grpcUnary(request, metadata) -/>
    requestContext = new ClientRequestContext(clientEnhancer, 'unary', methodName, metadata, request)
    clientEnhancer.requestWillBegin(requestContext)

    def = deferred()

    serverSideError(err): void ->
      debug('grpcUnary callFailed:', requestContext.describe(), 'serverSideError:', err)
      now err = clientEnhancer.unmarshalError(err)

      requestContext.error = err
      requestContext.errorOrigin = 'server'
      clientEnhancer.requestDidEnd(requestContext)
      def.reject(err)

    success(response): void ->
      debug('grpcUnary callSucceeded:', requestContext.describe())
      requestContext.response = response
      clientEnhancer.requestDidEnd(requestContext)
      def.resolve(response)

    debug('grpcUnary call:', requestContext.describe())
    method.call(context, request, requestContext.metadata, (err, response) ->
      if err:
        serverSideError(err)
      else:
        success(response)
    )

    def.promise

// Streams are already async iterable.
wrapResponseStreamMethod(clientEnhancer, methodName, method, context) ->
  grpcResponseStream(request, metadata) -/>
    requestContext = new ClientRequestContext(clientEnhancer, 'responseStream', methodName, metadata, request)
    clientEnhancer.requestWillBegin(requestContext)
    let ended = false

    callEnded(error): void ->
      if ended: return
      now ended = true
      if error:
        now error = clientEnhancer.unmarshalError(error)
        requestContext.errorOrigin = 'server'
        requestContext.error = error
        debug('grpcResponseStream callFailed:', requestContext.describe(), 'serverSideError:', error)
      else:
        debug('grpcResponseStream callSucceeded:', requestContext.describe())
      clientEnhancer.requestDidEnd(requestContext)

    debug('grpcResponseStream call:', requestContext.describe())
    stream = method.call(context, request, requestContext.metadata)

    stream.once('end', callEnded)
    stream.once('error', callEnded)
    stream.once('close', callEnded)

    wrappedStream() -*/>
      try:
        yield* stream
      catch err:
        throw clientEnhancer.unmarshalError(err)

    return wrappedStream()


// When calling a method with a request stream, the user provides an async
// generator that produces the stream of values.
wrapRequestStreamMethod(clientEnhancer, methodName, method, context) ->
  grpcRequestStream(asyncGenerator, metadata) -/> {
    requestContext = new ClientRequestContext(clientEnhancer, 'requestStream', methodName, metadata, null)
    clientEnhancer.requestWillBegin(requestContext)

    let stream = null
    def = deferred()

    clientSideError(err): void ->
      debug('grpcRequestStream callFailed:', requestContext.describe(), 'clientSideError:', err)

      // Throw error if not already thrown
      // XXX: do we send the error to the server?
      if not requestContext.error:
        requestContext.error = err
        requestContext.errorOrigin = 'client'
        clientEnhancer.requestDidEnd(requestContext)
        def.reject(err)

      // Cancel the call in the event of a client side error
      // XXX: due to a resource leak in GRPC, we must defer this
      setTimeout(-> stream.cancel(), 0)

    serverSideError(err): void ->
      debug('grpcRequestStream callFailed:', requestContext.describe(), 'serverSideError:', err)
      now err = clientEnhancer.unmarshalError(err)

      // Throw error if not already thrown
      if not requestContext.error:
        requestContext.error = err
        requestContext.errorOrigin = 'server'
        clientEnhancer.requestDidEnd(requestContext)
        def.reject(err)

    success(response): void ->
      debug('grpcRequestStream callSucceeded:', requestContext.describe())
      requestContext.response = response
      clientEnhancer.requestDidEnd(requestContext)
      def.resolve(response)

    debug('grpcRequestStream: beginning call', requestContext.describe())
    now stream = method.call(context, requestContext.metadata, (err, response): void ->
      if err: serverSideError(err) else: success(response)
    )

    // Dump from the async generator to the stream
    writer(): void -/>
      try:
        for await (packet of asyncGenerator(stream)): stream.write(packet)
      catch err:
        clientSideError(err)
      finally:
        debug('grpcRequestStream: closing stream for call', requestContext.describe())
        stream.end()

    writer()

    // Return the deferred promise
    def.promise
  }


// For the time being, just use the streaming API.
// There is probably some solution involving async generators but in this case
// it is going to require a bunch of combinators and be really slow.
wrapBidiStreamMethod(method, context) ->
  grpcBidiStream(handler): StreamHandler ->
    stream = method.call(context)
    handler.stream = stream
    // XXX: client-side handlers need different error handling
    handler._isClient = true
    handleStream(stream, handler)
    handler

wrapMethod(enhancer, methodName, method, context) ->
  classification = classifyMethod(method)

  match classification:
    | 'unary':
      wrapUnaryMethod(enhancer, methodName, method, context)
    | 'requestStream':
      wrapRequestStreamMethod(enhancer, methodName, method, context)
    | 'responseStream':
      wrapResponseStreamMethod(enhancer, methodName, method, context)
    | 'bidirectionalStream':
      wrapBidiStreamMethod(method, context)
    | else:
      throw new Error(`Could not determine gRPC call type for method '${methodName}'`)

// Allow clients to be enhanced
export class ClientEnhancer:
  constructor(grpcClient) ->
    this.grpcClient = grpcClient
    this._wrapMethods()

  // Override in subclass to perform processing before a request is sent.
  // This method SHOULD NOT throw, as errors will be propagated into the gRPC
  // call context.
  requestWillBegin(requestContext: ClientRequestContext): void -> return

  // Override in subclass to perform processing after a request is complete.
  // This method SHOULD NOT throw, as errors will be propagated into the gRPC
  // call context.
  requestDidEnd(requestContext: ClientRequestContext): void -> return

  // Override in subclass to decode errors sent from the server. This can
  // be used to e.g. turn an Error with a 404 code into a NotFoundError.
  //
  // XXX: not working yet.
  unmarshalError(err) -> err

  close(): void ->
    this.grpcClient.close()

  _wrapMethods(): void ->
    { grpcClient } = this

    for key k, val method in Object.getPrototypeOf(grpcClient):
      if typeof(method) == 'function':
        this[k] = wrapMethod(this, k, method, grpcClient)
