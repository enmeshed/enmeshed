import { ResourceTypeData } from './Resource'

incoming = require('debug')('node-control-plane:traffic:incoming')
outgoing = require('debug')('node-control-plane:traffic:outgoing')
debug = require('debug')('node-control-plane:node')

// Node represents a remote Envoy node that is connected to this control
// plane.
export class Node:
  controller = null
  environment = null
  key = null
  // Connection between Envoy and this node
  connection = null
  // Versions most recently acked
  acked: ResourceTypeData = new ResourceTypeData()
  // Versions in flight
  inFlight: ResourceTypeData = new ResourceTypeData()
  // Names of each kind of resource requested by the client
  requested: ResourceTypeData = new ResourceTypeData()

  constructor(key) ->
    this.key = key

  // Clear stateful data related to this connection
  clearConnectionData(): void ->
    this.acked = new ResourceTypeData()
    this.requested = new ResourceTypeData()

  // Node connected to control plane.
  didConnect(connection): void ->
    if this.connection:
      throw new Error("Node connected twice")

    if not this.environment:
      throw new Error("Node must be assigned an environment by Controller.identifyNode")

    this.connection = connection
    this.controller = connection.controller
    this.environment.nodeWillJoin(this)

  // Node disconnected from control plane.
  didDisconnect(): void ->
    this.connection = null
    this.clearConnectionData()
    this.environment.nodeDidLeave(this)
    this.environment = null

  // Environment data changed
  environmentDidChange(environment, diffs) ->
    // Issue a discovery response for each type of data that was previously
    // requested by the Envoy server.
    for elem ty in diffs:
      if ty and this.requested.get(ty):
        this.sendDiscoveryResponse(ty)

  sendDiscoveryResponse(type) ->
    names = this.requested.get(type)
    [ version, resources ] = this.environment.getMatchingResources(type, names)
    outgoing('-> node', this.key, ':', type.typeId, version, resources)

    // Mark version as in-flight
    this.inFlight.set(type, version)

    // Convert resources to an array of google.protobuf.Any's
    anyResources = [...for val e in resources: [type.toAny(e)]]
    this.connection?.write({
      version_info: version.toString()
      type_url: type.typeId
      resources: anyResources
    })

  // Receive a discovery request from Envoy
  discoveryRequest(packet): void ->
    if packet.type_url:
      type = this.controller.types.forTypeUrl(packet.type_url)
      this.discoveryRequestForType(type, packet)
      return

  discoveryRequestForType(type, packet): void ->
    inFlightVersion = this.inFlight.get(type)
    latestVersion = this.environment.getLatestVersion(type)

    // request is a NACK
    if packet.error_detail:
      incoming(`<- node ${this.key}: nack ${type.typeId}`, packet.error_detail)

      // Clear in-flight data
      if packet.version_info and (packet.version_info == inFlightVersion):
        this.inFlight.set(type, null)

      // Let user customize nack handling via Controller inheritance.
      this.controller.nodeDidNack(this, type, packet.version_info, packet.error_detail)

      // XXX: nack handling? Should be exporting an alert to something.
      return

    // Request is either an ACK or a new request. In any case, update the
    // peer's requested set.
    this.requested.set(type, packet.resource_names or [])

    // request is an ACK
    if (not packet.error_detail) and packet.version_info:
      envoyVersion = packet.version_info
      incoming(`<- node ${this.key}: ack ${type.typeId} v${packet.version_info}`)
      // Case 1: Receive an ack for something that was in flight, good news everyone
      if inFlightVersion and inFlightVersion == envoyVersion:
        debug('node', this.key, ': ack was for in-flight version, envoy is synced!')
        this.inFlight.set(type, null)
        return

      // Case 2: Receive an ack for something while something else is in flight.
      // This could be envoy catching up with old data. Ignore.
      if inFlightVersion and inFlightVersion != envoyVersion:
        debug('node', this.key, ': ack for a different version, assuming envoy is still catching up')
        return

      // Case 3: Receive an ack when we don't have anything in flight
      if (not inFlightVersion):
        // Ack for the actual latest version = fine, quit
        if envoyVersion == latestVersion:
          debug('node', this.key, ': ack was for the latest version, envoy is synced!')
          return

        // Ack for a version we don't know about.
        // usually indicates a crash or loss of state. We will just send our
        // best known data.
        debug('node', this.key, ': ack for something we never sent! Re-sending state.')
        this.sendDiscoveryResponse(type)
        return

    // Specific resource request
    incoming(`<- node ${this.key}: discovery request`, packet)
    this.sendDiscoveryResponse(type)
