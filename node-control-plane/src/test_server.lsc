import { Controller, Node } from '.'

let myEnv

class MyController extends Controller:
  nodes = {}

  identifyNode(nodeInfo) ->
    hash = `cluster:${nodeInfo.cluster}:id:${nodeInfo.id}`
    if this.nodes[hash]: return this.nodes[hash]

    node = new Node(hash)
    node.environment = myEnv
    this.nodes[hash] = node
    node

  // Test dynamism; one second after node connects, push a new cluster def
  nodeDidConnect(node): void ->
    setTimeout(
      ->
        myEnv.update([
          Cluster.fromObject({
            name: "second_cluster"
            connect_timeout: { seconds: 5 }
            type: "STATIC"
            lb_policy: "ROUND_ROBIN"
            hosts: [
              {
                socket_address: { address: '127.0.0.1', port_value: 12345 }
              }
            ]
            http2_protocol_options: {}
          })
        ])
      1000
    )

  nodeDidDisconnect(node): void ->
    return


controller = new MyController()
now myEnv = controller.createEnvironment("testEnvironment")
{ Cluster } = controller.types
myEnv.set([
  Cluster.fromObject({
    name: "my_cluster"
    connect_timeout: { seconds: 5 }
    type: "EDS"
    eds_cluster_config: {
      eds_config: { ads: {} }
    }
    lb_policy: "ROUND_ROBIN"
    http2_protocol_options: {}
  })
])

controller.serve('0.0.0.0:34567')
