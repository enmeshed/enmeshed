import { ReflectionDomain, InjectableDataSource, awaitUpdate, EnvironmentWatcher } from '..'

deferred = require('p-defer')

test! 'basic', -/>
  ds = new InjectableDataSource()
  dom = new ReflectionDomain()
  dom.start(ds)

  ds.injectServiceTemplate("service1", {
    type: "grpc"
    protocols: ['mesh.HealthCheck']
  })
  ds.injectProviderTemplate("provider1", {
    type: "mesh"
    mesh: {
      type: "cluster-dns"
      dns: "service1.service.cluster.local"
    }
  })

  ds.injectEnvironment("live")
  ds.injectService("live", "service1")
  ds.injectProvider("live", "provider1")
  ds.injectProviderMap("live", {
    "service1": "provider1"
  })

  liveEnv = dom.getEnvironment("live")
  <- awaitUpdate(liveEnv)

  // Assert basic integrity of system resources
  service1 = liveEnv.getService("service1")
  provider1 = liveEnv.getProvider("provider1")

  expect(service1.name).toBe("service1")
  expect(service1.type).toBe("grpc")
  expect(service1.protocols).toEqual(['mesh.HealthCheck'])
  service1provider = service1.getProvider()
  expect(service1.getProvider()).toBe(service1provider)
  expect(service1provider).toBe(provider1)

  expect(provider1.name).toBe("provider1")
  expect(provider1.provides(service1)).toBeTruthy()

test! 'change local resource', -/>
  // Init
  ds = new InjectableDataSource()
  dom = new ReflectionDomain()
  dom.start(ds)
  ds.injectServiceTemplate("service1", { config: "stuff" })
  ds.injectEnvironment("live")
  ds.injectService("live", "service1")
  liveEnv = dom.getEnvironment("live")

  // Test
  <- awaitUpdate(liveEnv)
  service1 = liveEnv.getService("service1")
  expect(service1.config).toBe("stuff")
  ds.updateService(service1, { config: "nonsense" })
  updated <- awaitUpdate(service1)
  expect(updated).toBeTruthy()
  expect(service1.config).toBe("nonsense")

test! 'change resource template', -/>
  // Init
  ds = new InjectableDataSource()
  dom = new ReflectionDomain()
  dom.start(ds)
  ds.injectServiceTemplate("service1", { config: "stuff" })
  ds.injectEnvironment("live")
  ds.injectService("live", "service1")
  liveEnv = dom.getEnvironment("live")

  // Test
  <- awaitUpdate(liveEnv)
  service1 = liveEnv.getService("service1")
  expect(service1.config).toBe("stuff")
  ds.injectServiceTemplate("service1", { config: "nonsense"})
  updated <- awaitUpdate(service1)
  expect(updated).toBeTruthy()
  expect(service1.config).toBe("nonsense")

test! 'env watcher', -/>
  // Init
  ds = new InjectableDataSource()
  dom = new ReflectionDomain()
  dom.start(ds)
  def = deferred()

  watcher = new EnvironmentWatcher(dom, "live", (e, c) ->
    console.log("EnvironmentWatcher found", c)
    def.resolve(c)
  )
  watcher.start()

  ds.injectServiceTemplate("service1", { config: "stuff" })
  ds.injectEnvironment("live")
  ds.injectService("live", "service1")
  rst <- def.promise
  expect(rst[0].name).toBe('service1')
  watcher.stop()
