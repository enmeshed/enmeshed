isEqual = require('lodash.isequal')
obnoxious = require('debug')('mesh-reflection:obnoxious')

function eqSet(as, bs) {
    if (as.size !== bs.size) return false
    for (var a of as) if (!bs.has(a)) return false
    return true
}

export class Resource:
  static kind = "resource"
  name = null
  __meta = {
    changed: false
    environment: null
    templateData: {}
    localData: {}
    data: null
    dependents: []
  }

  constructor(name, environment) ->
    this.name = name
    this.__meta.environment = environment

    // Get template information from domain
    template = environment.domain._getTemplate(this.constructor.kind, name)
    if not template:
      throw new Error(`Resource of type ${this.constructor.kind} named ${name} was not defined on the containing domain.`)
    this.__meta.templateData = template

  getEnvironment() ->
    this.__meta.environment

  _isDirty(): boolean ->
    this.__meta.changed

  _clean(): void -> this.__meta.changed = false

  _dirty(): void ->
    this.__meta.changed = true
    for elem dependent in this.__meta.dependents:
      dependent._dirty()
    this.__meta.environment._deferChanges()

  _setTemplate(template): void ->
    obnoxious(this.constructor.kind, this.name, "_setTemplate")
    this.__meta.templateData = template
    this._setData()

  _setData(localData): void ->
    this.__meta.localData = (localData or this.__meta.localData)
    lastData = this.__meta.data
    this.__meta.data = Object.assign({}, this.__meta.templateData, this.__meta.localData)

    if not isEqual(lastData, this.__meta.data):
      lastName = this.name // Name is immutable, don't let it change
      Object.assign(this, this.__meta.data)
      this.name = lastName
      obnoxious(this.constructor.kind, this.name, "_setData: data changed")
      this._dirty()

export class Service extends Resource:
  static kind = "service"
  getProvider() -> this.__meta.provider

  _findProvider() ->
    { environment } = this.__meta
    lastProvider = this.__meta.provider
    providerName = environment.getProviderNameForServiceName(this.name)
    this.__meta.provider = environment.getProvider(providerName)
    if lastProvider != this.__meta.provider: this._dirty()

export class Provider extends Resource:
  static kind = "provider"
  constructor(...args) ->
    super(...args)
    this.__meta.services = new Set()
    this.__meta.ordinalServiceNames = []

  getServiceSet(): Set -> this.__meta.services
  provides(svc: Service): boolean ->
    if not svc: return false
    this.__meta.services.has(svc)

  // It is occasionally useful to have an ordinal sequencing of services
  // on a provider, for instance when handing out well known ports.
  // We do it here by just sorting the service names. (Better way?)
  getServiceOrdinal(svc: Service): number ->
    services = this.__meta.services
    seq = []
    services.forEach(x -> seq.push(x))
    seq.sort((a, b) -> if a.name > b.name: 1 else: -1)
    idx = seq.indexOf(svc)
    if idx > -1: idx else: null

  _findServices(): boolean ->
    { environment } = this.__meta
    lastServices = this.__meta.services
    serviceNames = environment.getServiceNamesForProviderName(this.name)
    this.__meta.services = environment.getServiceSetForServiceNames(serviceNames)
    if not eqSet(lastServices, this.__meta.services): this._dirty()

  // When a Provider's data changes, all Services it is providing must
  // also be considered dirty.
  _setData(localData): void ->
    super._setData(localData)
    if this._isDirty():
      this.getServiceSet().forEach((svc) -> svc._dirty())
