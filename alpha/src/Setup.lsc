import { callInjectDependencies, callProviderInitializer } from './Provider'
import { setDependencyNode } from './Resource'
import { ResolutionContext } from './ResolutionContext'

debug = require("debug")("@enmeshed/alpha")

class SetupContext:
  constructor(resolutionContext, dependencyNode, provider, namespace) ->
    this.resolutionContext = resolutionContext
    this.dependencyNode = dependencyNode
    this.provider = provider
    this.namespace = namespace

  getNameArg() ->
    this.resolutionContext.nameArg

export resolveTransient(namespace, tmpName, dependencies) -/>
  { Dependencies } = namespace.constructor
  fakeProvider = {}
  node = new (namespace.constructor.DependencyNode)()
  resolutionContext = new ResolutionContext(tmpName)
  node.setResolutionContext(resolutionContext)
  node.provider = fakeProvider
  node.isTransient = true

  setupContext = new SetupContext(resolutionContext, node, fakeProvider, namespace)
  { resolvedDependencies, strongRefs } <- Dependencies.from(dependencies).resolve(setupContext)
  node.injectDependencies(strongRefs)


export setup(namespace, provider, resolutionContext, isTransient) -/>
  debug("Resource [", resolutionContext._dump(), "] - SETUP BEGIN")
  { Dependencies } = namespace.constructor

  // Create associated deptree node
  node = new (namespace.constructor.DependencyNode)()
  node.setResolutionContext(resolutionContext)
  node.provider = provider
  node.isTransient = isTransient
  if not isTransient:
    node.namespace = namespace

  setupContext = new SetupContext(resolutionContext, node, provider, namespace)
  // Get collection of dependencies from resource provider
  deps = Dependencies.of(provider)
  // Resolve deps
  { resolvedDependencies, strongRefs } <- deps.resolve(setupContext)
  // Inject into dependency node which will refcount all the deps
  node.injectDependencies(strongRefs)

  // Create the resource using injectDependencies
  try:
    debug("Resource [", resolutionContext._dump(), "] - dependencies resolved, proceeding to injectDependencies")
    resource <- callInjectDependencies(provider, resolvedDependencies, setupContext)
    setDependencyNode(resource, node)
    debug("Resource [", resolutionContext._dump(), "] - callInitializer")
    <- callProviderInitializer(provider, resource, setupContext)
    debug("Resource [", resolutionContext._dump(), "] - SETUP COMPLETE")
    resource
  catch err:
    // If dependency injection fails, cleanup references we took during init
    node.teardown().catch((err) -> console.error("Error during destructor cascade", err))
    throw err
