import { getDestructor, Resources } from './Resource'

debug = require("debug")("@enmeshed/alpha")

export class DependencyNode:
  // The owning resource
  resource = null
  // The original provider of the owning resource
  provider = null

  refcount = 0

  // Resource dependencies
  deps: Resources = new Resources()

  setResolutionContext(resolutionContext): void ->
    this.name = resolutionContext.name

  addTeardownHook(hook): void ->
    if this.teardownHooks:
      this.teardownHooks.push(hook)
    else:
      this.teardownHooks = [hook]

  addEvictionSite(site): void ->
    if not this.evictionSites:
      this.evictionSites = new Map()

    this.evictionSites.set(site, true)

  removeEvictionSite(site): void ->
    if this.evictionSites:
      this.evictionSites.delete(site)

  teardown(): void -/>
    debug("DependencyNode", this.name, "teardown")
    // Tear down owning resource
    destructor = getDestructor(this.resource)
    if destructor:
      debug("DependencyNode", this.name, "destructor")
      try:
        <- destructor.call(this.resource)
      catch err:
        // XXX: Destructor error handling
        console.error(err)

    // Deref all deps and release internal references
    debug("DependencyNode", this.name, "deps.clear()")
    <- this.deps.clear()
    this.deps = undefined
    this.resource = undefined
    this.provider = undefined
    this.evictionSites = undefined
    debug("DependencyNode", this.name, "deps cleared")

    // Execute all teardown hooks
    try:
      if this.teardownHooks:
        for elem hook in this.teardownHooks: hook(this)
    catch err:
      // XXX: destructor error handling
      console.error(err)

    this.teardownHooks = undefined

  injectDependencies(deps): void ->
    this.deps.add(...deps)

  deref() ->
    this.refcount--
    debug("DependencyNode", this.name, "deref - refcount", this.refcount)
    if this.refcount < 1:
      this.teardown().catch((err) ->
        // XXX: destructor error handling
        return
      )
    else:
      return Promise.resolve(undefined)

  ref(): void ->
    this.refcount++
    debug("DependencyNode", this.name, "ref - refcount", this.refcount)

  isReferenced(): boolean ->
    this.refcount > 0

  // Evict this resource from all caches that support eviction.
  evict() ->
    if this.evictionSites:
      // Mutation safety: copy eviction sites first
      sites = [...for site of this.evictionSites.keys(): [site]]

      Promise.all([...for elem site in sites: [site.evict(this)]])
    else:
      Promise.resolve(undefined)
