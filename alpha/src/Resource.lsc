import { errors } from '@enmeshed/errors'

dependencyNode$ = Symbol.for("enmeshed.alpha.dependencyNode")
destroy$ = Symbol.for("enmeshed.alpha.destroy")

export toResource(x) -> x

export getDependencyNode(rsrc) ->
  rsrc[dependencyNode$]

export setDependencyNode(rsrc, node, provider): void ->
  rsrc[dependencyNode$] = node
  node.resource = rsrc
  node.provider = provider

export getDestructor(rsrc) ->
  rsrc[destroy$]

export { destroy$ }

// Manage references to a collection of resources.
export class Resources:
  resources = new Map()

  add(...resources): void ->
    if not this.resources:
      throw new errors.InternalError("attempt to mutate a destroyed Resources object")
    for elem resource in resources:
      if not this.resources.has(resource):
        getDependencyNode(resource).ref()
        this.resources.set(resource, true)

  destroy(): void ->
    this.resources.forEach((value, key) ->
      getDependencyNode(key).deref()
    )
    this.resources = undefined

  awaitDestroy() -/>
    promises = []
    this.resources.forEach((value, key) ->
      promises.push(getDependencyNode(key).deref())
    )
    <- Promise.all(promises)
    this.resources = undefined
