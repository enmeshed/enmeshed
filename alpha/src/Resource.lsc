import { errors } from '@enmeshed/errors'

dependencyNode$ = Symbol.for("enmeshed.alpha.dependencyNode")

export toResource(x) -> x

export getDependencyNode(rsrc) ->
  rsrc[dependencyNode$]

export setDependencyNode(rsrc, node): void ->
  rsrc[dependencyNode$] = node
  node.resource = rsrc

export isTransient(rsrc) ->
  !!(rsrc[dependencyNode$].isTransient)

// Manage references to a collection of resources.
export class ResourceCache:
  supportsEviction = false

  // Whenever a resource is added to a cache that supports eviction, add
  // an eviction handler to the resource's dep node.
  resourceWasAdded(resource): void ->
    if this.supportsEviction:
      getDependencyNode(resource).addEvictionSite(this)

  resourceWasRemoved(resource): void ->
    if this.supportsEviction:
      getDependencyNode(resource).removeEvictionSite(this)

  evict(resource): Promise<void> -> Promise.resolve(undefined)

export class Resources extends ResourceCache:
  resources = new Map()

  constructor(supportsEviction) ->
    this.supportsEviction = !!supportsEviction

  add(...resources): void ->
    for elem resource in resources:
      if not this.resources.has(resource):
        this.resources.set(resource, true)
        getDependencyNode(resource).ref()
        this.resourceWasAdded(resource)

  destroy(): void ->
    this.resources.forEach((value, key) =>
      getDependencyNode(key).deref()
      this.resourceWasRemoved(key)
    )
    this.resources.clear()

  [Symbol.iterator] () -> this.resources.keys()

  evict(resource) ->
    if this.resources.has(resource):
      this.resources.delete(resource)
      this.resourceWasRemoved(resource)
      getDependencyNode(resource).deref()
    else:
      Promise.resolve(undefined)

  clear(): Promise<void> ->
    promises = []
    this.resources.forEach((value, key) =>
      this.resourceWasRemoved(key)
      promises.push(getDependencyNode(key).deref())
    )
    this.resources.clear()
    Promise.all(promises)

export class ResourceMap extends ResourceCache:
  nameToResource = new Map()

  // Set a key in the map. This method is synchronous.
  set(key, resource): ResourceMap ->
    if not this.nameToResource.has(key):
      this.nameToResource.set(key, resource)
      getDependencyNode(resource).ref()
      this.resourceWasAdded(resource)

    this

  // Get resource by key. This method is synchronous.
  get(key) ->
    this.nameToResource.get(key)

  // Delete a key from the map. This method is asynchronous and returns
  // Promise<true, false> insofar as the key existed and was removed.
  // The returned promise never rejects.
  delete(key): Promise<boolean> ->
    resource = this.nameToResource.get(key)
    if resource:
      this.nameToResource.delete(key)
      this.resourceWasRemoved(resource)
      getDependencyNode(resource).deref().then(-> true)
    else:
      Promise.resolve(false)

  // Cache eviction. Performs a linear search of the map and should not
  // be used in general purpose code.
  evict(resource) ->
    let targetKey = undefined
    for entry of this.nameToResource.entries():
      if entry[1] == resource:
        now targetKey = entry[0]
        break

    if targetKey != undefined:
      this.delete(targetKey)
    else:
      Promise.resolve(undefined)

  clear(): Promise<void> ->
    promises = []
    this.nameToResource.forEach((resource) =>
      this.resourceWasRemoved(resource)
      promises.push(getDependencyNode(resource).deref())
    )
    this.nameToResource.clear()
    Promise.all(promises)
