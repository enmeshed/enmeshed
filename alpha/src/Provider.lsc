import { destroy$, init$ } from './Resource'

getDependencies$ = Symbol.for("enmeshed.alpha.getDependencies")
injectDependencies$ = Symbol.for("enmeshed.alpha.injectDependencies")
isTransient$ = Symbol.for("enmeshed.alpha.isTransient")
providerInit$ = Symbol.for("enmeshed.alpha.providerInitializer")

export { getDependencies$, injectDependencies$, isTransient$ }

export callGetDependencies(provider, context) ->
  provider[getDependencies$](context)

export callInjectDependencies(provider, dependencyMap, context) ->
  provider[injectDependencies$](dependencyMap, context)

export callProviderInitializer(provider, resource, context) ->
  if provider[providerInit$]:
    provider[providerInit$](resource, context)
  else:
    Promise.resolve(undefined)

export isResourceTransient(provider, resolutionContext): boolean ->
  if not provider[isTransient$]: return false
  provider[isTransient$](resolutionContext)

export createProvider(spec) ->
  provider = {}
  if spec.dependencies:
    deps = spec.dependencies
    provider[getDependencies$] = -/> deps
  elif spec.getDependencies:
    provider[getDependencies$] = spec.getDependencies
  else:
    provider[getDependencies$] = -/> null

  if spec.injectDependencies:
    provider[injectDependencies$] = spec.injectDependencies
  else:
    throw new Error("createProvider: injectDependencies function is required")

  if spec.init:
    provider[providerInit$] = spec.init

  if spec.isTransient:
    provider[isTransient$] = spec.isTransient

  if spec.name or spec.providerName:
    provider.providerName = spec.name or spec.providerName

export class Provider:
  static dependencies = {}

  static [isTransient$] (resolutionContext) ->
    this.isTransient(resolutionContext)

  static [getDependencies$] (setupContext) ->
    if typeof(this.dependencies) == 'function':
      this.dependencies(setupContext)
    elif typeof(this.dependencies) == 'object':
      Promise.resolve(this.dependencies)
    else:
      Promise.resolve(undefined)

  static [injectDependencies$] (dependencyMap, setupContext) ->
    this.injectDependencies(dependencyMap, setupContext)

  static injectDependencies(dependencyMap, setupContext) ->
    Promise.resolve(new this(dependencyMap, setupContext))

  static isTransient(resolutionContext) -> false

  constructor(deps) ->
    Object.assign(this, deps)

  [init$] () -> this.init()

  [destroy$] () -> this.destroy()

  init() -/>
    return

  destroy() -/>
    return
