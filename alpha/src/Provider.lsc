getDependencies$ = Symbol.for("enmeshed.alpha.getDependencies")
dependencies$ = Symbol.for("enmeshed.alpha.dependencies")
injectDependencies$ = Symbol.for("enmeshed.alpha.injectDependencies")
isTransient$ = Symbol.for("enmeshed.alpha.isTransient")
init$ = Symbol.for("enmeshed.alpha.init")
destroy$ = Symbol.for("enmeshed.alpha.destroy")

export { getDependencies$, injectDependencies$, isTransient$, dependencies$, init$, destroy$ }

export callInjectDependencies(provider, dependencyMap, context) ->
  provider[injectDependencies$](dependencyMap, context)

export callProviderInitializer(provider, resource, context) ->
  if provider[init$]:
    provider[init$](resource, context)
  else:
    Promise.resolve(undefined)

export getDestructor(provider) ->
  provider[destroy$]

export callIsTransient(provider, resolutionContext): boolean ->
  if not provider[isTransient$]: return false
  provider[isTransient$](resolutionContext)

export createProvider(spec) ->
  provider = {}
  if spec.dependencies:
    deps = spec.dependencies
    provider[getDependencies$] = -/> deps
  elif spec.getDependencies:
    provider[getDependencies$] = spec.getDependencies
  else:
    provider[getDependencies$] = -/> null

  if spec.injectDependencies:
    provider[injectDependencies$] = spec.injectDependencies
  else:
    throw new Error("createProvider: injectDependencies function is required")

  if spec.init:
    provider[init$] = spec.init

  if spec.destroy:
    provider[destroy$] = spec.destroy

  if spec.isTransient:
    provider[isTransient$] = spec.isTransient

  if spec.name or spec.providerName:
    provider.providerName = spec.name or spec.providerName

  provider

// Like createProvider, but mutates the spec, preserving `this`
export toProvider(spec) ->
  if spec.dependencies:
    spec[getDependencies$] = -/> this.dependencies
  elif spec.getDependencies:
    spec[getDependencies$] = spec.getDependencies
  else:
    spec[getDependencies$] = -/> null

  if spec.injectDependencies:
    spec[injectDependencies$] = spec.injectDependencies
  else:
    throw new Error("toProvider: injectDependencies function is required")

  if spec.init:
    spec[init$] = spec.init

  if spec.destroy:
    spec[destroy$] = spec.destroy

  if spec.isTransient:
    spec[isTransient$] = spec.isTransient

  if spec.name or spec.providerName:
    spec.providerName = spec.name or spec.providerName

  spec

export class Provider:
  static dependencies = {}

  static [isTransient$] (resolutionContext) ->
    this.isTransient(resolutionContext)

  static [getDependencies$] () ->
    this.dependencies

  static [injectDependencies$] (dependencyMap, setupContext) ->
    this.injectDependencies(dependencyMap, setupContext)

  static [init$] (resource, setupContext) ->
    this.init(resource, setupContext)

  static [destroy$] (resource) ->
    this.destroy(resource)

  static init(resource, setupContext) ->
    resource.init(setupContext)

  static destroy(resource) ->
    resource.destroy()

  static injectDependencies(dependencyMap, setupContext) ->
    Promise.resolve(new this(dependencyMap, setupContext))

  static isTransient(resolutionContext) -> false

  constructor(deps, setupContext) ->
    Object.assign(this, deps)

  init() -> Promise.resolve(undefined)

  destroy() -> Promise.resolve(undefined)
