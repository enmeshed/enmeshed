import { getDependencyNode, Resources } from './Resource'
import { Namespace } from './Namespace'

// A Container fronts a Namespace, forwarding requests and ref'ing the
// returned objects if they are persistent. The Container can then be
// destroyed, in turn derefing all the objects it contains.
export class Container:
  static globalContainer = new Container(Namespace.globalNamespace)

  resources: Resources = new Resources()

  backingNamespace = null

  constructor(backingNamespace) ->
    this.backingNamespace = backingNamespace

  static get(name) ->
    this.globalContainer.get(name)

  static awaitDestroy() ->
    this.globalContainer.awaitDestroy()

  static add(...resources) ->
    this.globalContainer.add(...resources)

  static provide(arg1, arg2) ->
    this.globalContainer.provide(arg1, arg2)

  // Shortcut to the backing namespace's provider registration.
  provide(arg1, arg2) ->
    this.backingNamespace.provide(arg1, arg2)

  get(name) -/>
    result <- this.backingNamespace.resolve(name)
    node = getDependencyNode(result)
    if not node.isReferenced(): this.resources.add(result)
    result

  add(...resources): void ->
    this.resources.add(...resources)

  destroy(): void ->
    this.resources.destroy()

  awaitDestroy() ->
    this.resources.awaitDestroy()
