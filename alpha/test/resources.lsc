import { Provider, Container } from '..'

deferred = require('p-defer')

createDelayProvider(n, dep) ->
  class DelayProvider extends Provider:
    static providerName = `delay_${n}`

    static dependencies = if dep: { "dep": dep } else: {}

    constructor(deps) ->
      super()
      console.log(`DelayProvider(${n}) constructor: deps: ${deps}`)

    init() ->
      console.log(`DelayProvider(${n}).init`)
      if n == 1: Container.retain(this)
      def = deferred()
      setTimeout(-> def.resolve(), 1000)
      def.promise

    destroy() -/>
      console.log(`DelayProvider(${n}).destroy`)

  Container.provide(DelayProvider)

createDelayProvider(1)
createDelayProvider(2, "delay_1")
createDelayProvider(3, "delay_2")
