egressVirtualRouteForService(svc) ->
  {
    name: `vroute_service_${svc.name}`
    match: { prefix: `/grpc/${svc.name}/` }
    route: {
      cluster: `cluster_service_${svc.name}`
    }
  }

egressClusterForService(svc, prov, ingressPort) ->
  {
    name: `cluster_service_${svc.name}`
    connect_timeout: { seconds: 1 }
    type: 'STRICT_DNS'
    dns_lookup_family: 'V4_ONLY'
    lb_policy: 'ROUND_ROBIN'
    http2_protocol_options: {}
    load_assignment: {
      cluster_name: `cluster_service_${svc.name}`
      endpoints: [{
        lb_endpoints: [{
          endpoint: {
            address: {
              socket_address: {
                address: prov.dns
                port_value: ingressPort
              }
            }
          }
        }]
      }]
    }
  }

export populateEgressResources(rsrc, env, types, ingressPort, egressPort): void ->
  { Listener, RouteConfiguration, Cluster } = types

  // Determine all services in the current environment that are routable
  // via cluster dns to mesh_node providers.
  grpcServices = [...for elem svcName in env.getServiceNames():
    svc = env.getService(svcName)
    prov = svc.getProvider()
    if (svc.type == 'grpc_mesh') and (prov?.type == 'mesh_node') and (prov.dns): [svc]
  ]
  if grpcServices.length == 0: return

  // LISTENER
  rsrc.push(Listener.fromObject({
    name: 'listener_egress'
    address: {
      socket_address: {
        address: '0.0.0.0'
        port_value: egressPort
      }
    }
    filter_chains: [{
      filters: [{
        name: 'envoy.http_connection_manager'
        config: {
          // XXX
          access_log: [{
            name: "envoy.file_access_log"
            config: { path: "/dev/stdout" }
          }]
          codec_type: "AUTO"
          stat_prefix: "egress"
          http_filters: [{
            name: "envoy.router"
            config: {}
          }]
          rds: {
            config_source: { ads: {} }
            route_config_name: 'route_egress'
          }
        }
      }]
    }]
  }))

  // ROUTE
  rsrc.push(RouteConfiguration.fromObject({
    name: 'route_egress'
    virtual_hosts: [{
      name: 'vhost_egress'
      domains: ['*']
      routes: [
        ...for elem svc in grpcServices: [egressVirtualRouteForService(svc)]
      ]
    }]
  }))

  // CLUSTERS
  for elem svc in grpcServices:
    prov = svc.getProvider()
    rsrc.push(
      Cluster.fromObject(
        egressClusterForService(svc, prov, ingressPort)
      )
    )
