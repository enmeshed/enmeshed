// Test whether we can reach a grpc server through local proxy
import path from 'path'
import { MeshNode } from '@enmeshed/meshnode'
import { FileDataSource } from '@enmeshed/mesh-reflection-file-watcher'

unary(req, call) -/>
  console.log("server serving TestService.unary", req, call.metadata)
  if req.message == 'fail':
    throw new Error("failed call")
  else:
    { message: 'unary reply: ' + req.message}

it! 'should work', -/>
  ds = new FileDataSource(path.resolve(__dirname, './test_cluster.json'))
  node = new MeshNode()
  node.setReflectionDataSource(ds)

  // Load protobufs
  node.protos.setProtoPath(__dirname)
  node.protos.require('test')

  <- node.join('live', 'provider1')

  svc = node.getServicePort('service1')
  svc.bind('TestService', { unary })
  svc.start()

  cli = node.getClientPort('service1')
  iface = cli.clientForProtocol('TestService')

  resp <- iface.unary({message: 'test message'})
  expect(resp.message).toBe("unary reply: test message")

  <- node.stop()
